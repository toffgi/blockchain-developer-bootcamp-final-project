{"version":3,"sources":["style/metamask-logo.svg","style/opensea-logo.svg","utils/storeMetadata.js","utils/constants.js","components/Text.js","components/StyledHelpers.js","components/ConnectMM.js","utils/shortenAddress.js","components/MakeDonation.js","components/NftViewer.js","components/NftForm.js","components/OpenSeaLink.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","storeMetadata","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","title","description","file","client","metadata","metadataURI","wrap","_context","prev","next","NFTStorage","token","store","name","image","sent","url","replace","abrupt","stop","_x","_x2","_x3","apply","this","arguments","textSizes","Text","styled","span","_templateObject","taggedTemplateLiteral","fontFamily","underline","capitalize","uppercase","pointer","center","right","left","italic","t0","t1","t2","t3","t4","t5","t6","bold","fontWeight","display","block","inline","color","ellipsis","lineHeight","opacity","StyledBox","div","StyledHelpers_templateObject","StyledBtn","button","_templateObject2","StyledA","_templateObject3","StyledForm","form","_templateObject4","StyledLbl","label","_templateObject5","StyledInputTxt","input","attrs","type","_templateObject6","StyledInputFile","_templateObject7","StyledBlock","_templateObject8","MetamaskLogo","img","src","MMLogo","ConnectMM_templateObject","ConnectMM","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleLoginClick","bind","assertThisInitialized","handleLogoutClick","e","onLoginClick","target","value","onLogoutClick","minterAddress","window","ethereum","react_default","createElement","className","components_Text","address","num","length","undefined","concat","substring","shortenAddress","onClick","React","Component","MakeDonation","handleDonateClick","handleInputChange","onDonateClick","onInputChange","donating","donateAmount","role","aria-label","min","onChange","LoadingOutlined","style","NftViewer","state","loaded","_this2","nftView","nftTitle","nftDescription","Fragment","maxWidth","alt","onLoad","setState","NftForm","handleSubmit","fileInput","createRef","preventDefault","onFormSubmit","minting","onSubmit","accept","ref","OpenSeaLogo","OSLogo","OpenSeaLink_templateObject","OpenSeaLink","href","App","loginMM","provider","networkId","chainId","signer","SimpleNftContractInstance","ethers","providers","Web3Provider","getNetwork","alert","getSigner","getAddress","Contract","SimpleNftContract","networks","abi","contract","console","error","logoutMM","location","reload","formReset","tokenId","defineProperty","_ref2","_callee2","data","nftAsset","_context2","FormData","get","mint","_ref3","_callee3","tx","receipt","_iterator","_step","event","MintedMetadataURI","MintedMetadata","MintedMetadataImage","_context3","safeMint","log","wait","_createForOfIteratorHelper","events","s","n","done","args","toString","f","finish","tokenURI","fetchIPFSJSON","makeGatewayURL","ipfsURI","_ref4","_callee4","resp","_context4","fetch","json","makeDonation","_callee5","overrides","donation","_context5","from","utils","parseUnits","Donate","request","method","on","components_ConnectMM","components_NftViewer","components_OpenSeaLink","components_MakeDonation","components_NftForm","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f23d50e2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/metamask-logo.fd681d4a.svg\";","module.exports = __webpack_public_path__ + \"static/media/opensea-logo.27cfe691.svg\";","import { NFTStorage } from 'nft.storage';\nimport { NFT_STORAGE_KEY } from './constants';\n\nexport const storeMetadata = async(title, description, file) => {\n\n  const apiKey = NFT_STORAGE_KEY\n  const client = new NFTStorage({ token: apiKey })\n\n  const metadata = await client.store({\n    name: title,\n    description: description,\n    image: file\n  })\n  \n  // the returned metadata.url has the IPFS URI we want to add.\n  // our smart contract already prefixes URIs with \"ipfs://\", \n  // so we remove it before calling the `mintToken` function\n  const metadataURI = metadata.url.replace(/^ipfs:\\/\\//, \"\");\n  return metadataURI;\n}\n","// API token for nft.storage. \nexport const NFT_STORAGE_KEY = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweDcyZmFDQzgzNDQ1RjBiNDYxOTZGOGYwMmI4ZDEzMDE4NzUxMjk3QTciLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTYzNzYyMTYxNTE5MSwibmFtZSI6IkNvbnNlbnN5c0Jvb3RjYW1wIn0.mZo2aujRztBULiNgLBGvRGo2cGbuge8FTQYf1u99gQI\";\n","import styled from 'styled-components';\n\nconst getColor = (p) => {\n  // @ts-ignore\n  if (p.color) return p.color;\n  return 'black';\n};\nconst getAlignment = (p) => {\n  if (p.center) return 'center';\n  if (p.right) return 'right';\n  if (p.left) return 'left';\n  return 'inherit';\n};\nconst getDisplay = (p) => {\n  if (p.display) return p.display;\n  if (p.block) return 'block';\n  if (p.inline) return 'inline';\n  return 'initial';\n};\nconst getWeight = (p) => {\n  if (p.bold) return 700;\n  if (p.fontWeight) return p.fontWeight;\n  return 'inherit';\n};\nconst getLineHeight = (p) => {\n  if (p.lineHeight) return p.lineHeight;\n  return 'inherit';\n};\nconst textSizes = {\n  t0: '48px',\n  t1: '36px',\n  t2: '26px',\n  t3: '22px',\n  t4: '18px',\n  t5: '16px',\n  t6: '14px',\n};\nconst getSize = (p) => {\n  if (p.t0) return textSizes.t0;\n  if (p.t1) return textSizes.t1;\n  if (p.t2) return textSizes.t2;\n  if (p.t3) return textSizes.t3;\n  if (p.t4) return textSizes.t4;\n  if (p.t5) return textSizes.t5;\n  if (p.t6) return textSizes.t6;\n\n  return 'inherit';\n};\nconst getTransform = (p) => {\n  if (p.capitalize) return 'capitalize';\n  if (p.uppercase) return 'uppercase';\n  return '';\n};\n\nconst Text = styled.span`\n  font-family: ${(p) => p.fontFamily || 'Courier New'};\n  text-decoration: ${(p) => (p.underline ? 'underline' : '')};\n  text-transform: ${getTransform};\n  cursor: ${(p) => (p.pointer ? 'pointer' : '')};\n  text-align: ${getAlignment};\n  font-style: ${(p) => (p.italic ? 'italic' : '')};\n  font-size: ${getSize};\n  font-weight: ${getWeight};\n  display: ${getDisplay};\n  color: ${getColor};\n  overflow: ${(p) => (p.ellipsis ? 'hidden' : 'inherit')};\n  text-overflow: ${(p) => (p.ellipsis ? 'ellipsis' : 'inherit')};\n  white-space: ${(p) => (p.ellipsis ? 'nowrap' : '')};\n  line-height: ${getLineHeight};\n  opacity: ${(p) => p.opacity || 1};\n`;\n\nexport default Text;\n","import styled from 'styled-components';\n\nconst StyledBox = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  margin-top: 1%;\n  border: 1px solid papayawhip;\n  padding: 40px;\n  border-radius: 10px;\n  width: fit-content;\n  height: fit-content;\n`;\n\nconst StyledBtn = styled.button`\n  background: transparent;\n  color: papayawhip;\n  border-radius: 5px;\n  margin-left: 10px;\n  &:hover {\n    background-color: papayawhip; \n    color: #282c34;\n    cursor: pointer;\n  };\n`;\n\nconst StyledA = styled.a`\n  background: transparent;\n  color: papayawhip;\n  border-radius: 5px;\n  margin-left: 10px;\n  &:hover {\n    background-color: steelblue; \n    color: #282c34;\n    cursor: pointer;\n  };\n`;\n\nconst StyledForm = styled.form`\n  display: block;\n  justify-content: center;\n  align-items: center;\n  margin: 1% auto;\n  padding: 20px;\n  width: fit-content;\n  height: fit-content;\n`;\n\nconst StyledLbl = styled.label`\n\tmargin: 0.5px;\n\tdisplay: block;\n`;\n\nconst StyledInputTxt = styled.input.attrs({ \n  type: 'text',\n})`\n  font-size: 18px;\n  font-weight: bold;\n\tpadding: 0.5em;\n\tcolor: darkslategray;\n\tbackground: papayawhip;\n\tborder: none;\n\tborder-radius: 3px;\n\twidth: 100%;\n\tmargin-bottom: 0.5em;\n`;\n\nconst StyledInputFile = styled.input.attrs({ \n  type: 'file',\n})`\n  font-size: 18px;\n\tpadding: 0.5em;\n\tcolor: darkslategray;\n\tbackground: papayawhip;\n\tborder: none;\n\tborder-radius: 3px;\n\twidth: 100%;\n\tmargin-bottom: 0.5em;\n`;\n\nconst getColor = (p) => {\n  // @ts-ignore\n  if (p.color) return p.color;\n  // return 'black';\n};\n\nconst StyledBlock = styled.div`\n  display: block;\n  justify-content: center;\n  align-items: center;\n  margin: auto;\n  background-color: ${getColor};\n  padding: 20px;\n  width: fit-content;\n  height: fit-content;\n`;\n\nexport {\n  StyledBox,\n  StyledBtn,\n  StyledForm,\n  StyledLbl,\n  StyledInputTxt,\n  StyledInputFile,\n  StyledBlock,\n  StyledA\n}","import React from 'react';\nimport styled from 'styled-components';\nimport MMLogo from '../style/metamask-logo.svg';\nimport Text from './Text';\nimport { StyledBox, StyledBtn } from './StyledHelpers';\nimport { shortenAddress } from '../utils/shortenAddress';\n\nconst MetamaskLogo = styled.img.attrs({\n  src: MMLogo,\n})`\n  height: 40px;\n`;\n\nclass ConnectMM extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleLoginClick = this.handleLoginClick.bind(this);\n    this.handleLogoutClick = this.handleLogoutClick.bind(this);\n  }\n\n  handleLoginClick(e) {\n    this.props.onLoginClick(e.target.value);\n  }\n\n  handleLogoutClick(e) {\n    this.props.onLogoutClick(e.target.value);\n  }\n\n  render() {\n    const minterAddress = this.props.minterAddress;\n\n    if (!window.ethereum) {\n      return (\n        <div className=\"App-header\">\n          <StyledBox>\n          <MetamaskLogo />\n            <Text uppercase color=\"papayawhip\" t3>  \n            Looks like you don't have Metamask installed, you'll need it to use this app.\n            </Text>\n          </StyledBox>\n        </div>\n      \n      )} else if (minterAddress) {\n      return(\n        <div className=\"App-header\">\n          <StyledBox>\n          <MetamaskLogo />\n            <Text uppercase color=\"papayawhip\" t3>\n              {shortenAddress(minterAddress)}\n            </Text>\n            <div>\n            <StyledBtn onClick={this.handleLogoutClick}>\n            <Text uppercase color=\"282c34\" t3>\n              Log Out\n            </Text>\n            </StyledBtn>\n            </div>\n          </StyledBox>\n        </div> \n      )}\n\n    return (\n      <div className=\"App-header\">\n        <StyledBox>\n        <MetamaskLogo />\n          <StyledBtn onClick={this.handleLoginClick}>\n          <Text uppercase color=\"282c34\" t3>\n            Connect\n          </Text>\n          </StyledBtn>\n        </StyledBox>\n      </div> \n    )\n  }\n}\n\nexport default ConnectMM;","export const shortenAddress = (address, num = 3) => {\n  if (!address) return '';\n  return !!address && `${address.substring(0, num + 2)}...${address.substring(address.length - num - 1)}`;\n};\n","import React from 'react';\nimport Text from \"./Text\";\nimport { \n  StyledLbl, \n  StyledBtn, \n  StyledInputTxt, \n  StyledBlock} \nfrom \"./StyledHelpers\";\nimport { LoadingOutlined }from '@ant-design/icons';\n\nclass MakeDonation extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDonateClick = this.handleDonateClick.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  handleDonateClick(e) {\n    this.props.onDonateClick(e.target.value);\n  }\n\n  handleInputChange(e) {\n  this.props.onInputChange(e);\n  }\n\n  render() {\n    const donating = this.props.donating;\n    const donateAmount = this.props.donateAmount;\n\n    return(\n    <StyledBlock>\n          <StyledLbl><Text color=\"papayawhip\" t5>\n            Make a <Text color=\"yellow\"> 2 gwei </Text> \n            donation to the project by clicking on the button below. \n            <p> (if you would like to donate more <span role=\"img\" aria-label=\"beers\">🍻</span>  \n              modify the amount before clicking) </p>\n          </Text></StyledLbl>\n          <StyledInputTxt name=\"donateAmount\" type=\"text\" value={donateAmount} min=\"2\" onChange={this.handleInputChange}/>\n          {donating ? \n            <StyledBlock>\n              <p><LoadingOutlined style={{color: \"papayawhip\"}}/></p>\n              <Text uppercase color=\"papayawhip\" t4>\n                Donation in progress...\n              </Text></StyledBlock> \n              : \n              <StyledBtn onClick={this.handleDonateClick}>\n                <Text uppercase color=\"282c34\" t3> \n                  Make Donation :) \n                </Text>\n              </StyledBtn>}\n    </StyledBlock>\n    )\n  }\n}\n\nexport default MakeDonation;","import React from 'react';\nimport Text from \"./Text\";\nimport { StyledBlock } from \"./StyledHelpers\";\nimport { LoadingOutlined }from '@ant-design/icons';\n\nclass NftViewer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {loaded: false};\n  }\n\n  render() {\n    const nftView = this.props.nftView;\n    const nftTitle = this.props.nftTitle;\n    const nftDescription = this.props.nftDescription;\n\n    return(\n      <StyledBlock>\n          <Text color=\"papayawhip\" t1>\n            <p>Here's your freshly minted NFT!</p>\n          </Text>\n            <StyledBlock color=\"papayawhip\">\n              {this.state.loaded ? null :\n              <>\n                <p><LoadingOutlined style={{color: \"#282c34\"}}/></p>\n                <p><Text color=\"#282c34\" t3 italic> Please wait while your NFT is loading ... </Text></p>\n                <p><Text color=\"papayawhip\" t6>\n                  (It might take some minutes for your NFT to be confirmed on the blockchain) \n                </Text></p>\n              </>\n              }\n              <img\n                style={this.state.loaded ? {maxWidth: \"500px\"} : {display: 'none'}}\n                src={nftView}\n                alt=\"Freshly Minted NFT\"\n                onLoad={() => this.setState({loaded: true})}\n              />\n              <Text color=\"#282c34\" t3>\n                <p>Title: <Text color=\"#282c34\" t3 italic>{nftTitle}</Text></p>\n                <p>Description: <Text color=\"#282c34\" t3 italic>{nftDescription}</Text></p>\n              </Text>\n            </StyledBlock>\n      </StyledBlock>\n  )}\n}\n\nexport default NftViewer;","import React from 'react';\nimport Text from \"./Text\";\nimport { \n  StyledLbl, \n  StyledBtn,\n  StyledForm, \n  StyledInputTxt,\n  StyledInputFile, \n  StyledBlock} \nfrom \"./StyledHelpers\";\nimport { LoadingOutlined }from '@ant-design/icons';\n\nclass NftForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.fileInput = React.createRef();\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.props.onFormSubmit(e);\n  }\n\n  handleInputChange(e) {\n    this.props.onInputChange(e)\n  }\n\n  render() {\n    const minting = this.props.minting;\n    const fileInput = this.fileInput;\n    const nftTitle = this.props.nftTitle;\n    const nftDescription = this.props.nftDescription;\n\n    return(\n    <StyledForm onSubmit={this.handleSubmit}>\n    <StyledLbl><Text color=\"papayawhip\" t3> \n      Insert a title for your NFT:\n      <StyledInputTxt name=\"nftTitle\" type=\"text\" value={nftTitle} onChange={this.handleInputChange} />\n    </Text></StyledLbl>\n    <StyledLbl><Text color=\"papayawhip\" t3> \n      Insert a description for your NFT:\n      <StyledInputTxt name=\"nftDescription\" type=\"text\" value={nftDescription} onChange={this.handleInputChange} />\n    </Text></StyledLbl>\n    <StyledLbl><Text color=\"papayawhip\" t3>\n      Upload file:\n      {<StyledInputFile name=\"nftAsset\" type=\"file\" accept=\"image/*\" ref={fileInput} onChange={this.handleInputChange} />}\n    </Text></StyledLbl>\n    <br />\n    {minting ? \n        <StyledBlock>\n          <p><LoadingOutlined style={{color: \"papayawhip\"}}/></p>\n          <Text uppercase color=\"papayawhip\" t5>Minting to blockchain... </Text>\n          <p><Text color=\"papayawhip\" t6>\n            (It might a few minutes for your NFT to be confirmed on the blockchain) \n          </Text></p>\n        </StyledBlock> \n          : \n        <StyledBtn type=\"submit\">\n          <Text uppercase color=\"282c34\" t3>\n            Mint!\n          </Text>\n        </StyledBtn>}\n    </StyledForm>\n    )\n  }\n}\n\nexport default NftForm;","import React from 'react';\nimport styled from 'styled-components';\nimport OSLogo from '../style/opensea-logo.svg';\nimport Text from './Text';\nimport { StyledA, StyledBlock, StyledBox } from './StyledHelpers';\n\nconst OpenSeaLogo = styled.img.attrs({\n  src: OSLogo,\n})`\n  height: 40px;\n`;\n\nclass OpenSeaLink extends React.Component {\n  render() {\n    return (\n      <div className=\"App-header\">\n        <StyledBlock>\n          <StyledBox>\n            <StyledA href=\"https://testnets.opensea.io/collection/simplenft-blockchaindevbootcprj\">\n              <OpenSeaLogo />\n              <Text uppercase color=\"282c34\" t4>\n                Check the collection @OpenSea\n              </Text>\n            </StyledA>\n          </StyledBox>\n        </StyledBlock>\n      </div> \n    )\n  }\n}\n\nexport default OpenSeaLink;","import React, { Component } from \"react\";\nimport { ethers } from \"ethers\";\nimport SimpleNftContract from './contracts/SimpleNFT.json';\nimport { storeMetadata } from './utils/storeMetadata';\nimport ConnectMM from \"./components/ConnectMM\";\nimport Text from \"./components/Text\";\nimport { StyledBlock, StyledBtn } from \"./components/StyledHelpers\";\nimport MakeDonation from \"./components/MakeDonation\";\nimport NftViewer from \"./components/NftViewer\";\nimport NftForm from \"./components/NftForm\";\nimport OpenSeaLink from \"./components/OpenSeaLink\";\nimport \"./style/App.css\";\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      minterAddress: null,\n      contract: null, \n      nftTitle: '', \n      nftDescription: '',\n      nftAsset: '',\n      nftView: null,\n      tokenId: null,\n      minting: false,\n      donating: false,\n      donateAmount: \"2\"\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.fileInput = React.createRef();\n  }\n\n  componentDidMount() {\n    window.ethereum.request({ method: 'eth_requestAccounts' });\n  }\n  \n  // Login/Logout functions\n  loginMM = async () => {\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\n      const networkId = await provider.getNetwork();\n      const chainId = networkId.chainId;\n      if (chainId !== 1337 && chainId !== 4) {\n        return (\n          alert(\n            `Please connect to rinkeby testnet to use this App`\n          )\n        );\n      }\n      const signer = provider.getSigner()\n      const minterAddress = await signer.getAddress();\n\n      const SimpleNftContractInstance = new ethers.Contract(\n        SimpleNftContract.networks[networkId.chainId].address, \n        SimpleNftContract.abi, \n        signer\n      );\n\n      this.setState({\n        provider: provider, \n        signer: signer, \n        minterAddress: minterAddress, \n        contract: SimpleNftContractInstance,\n      });\n    } catch(error) {\n        alert(\n        `Failed to load web3. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  logoutMM = () => {\n    window.location.reload();\n  };\n\n  formReset = () => {\n    this.setState({tokenId: null, nftTitle: '', nftDescription: ''})\n  };\n\n  // Form-activated functions\n  handleInputChange = (e) => {\n    let target = e.target;\n    let name = target.name;\n    let value = target.value;\n    // console.log(value);\n    this.setState({\n      [name]: value,\n    })\n  };\n\n  handleSubmit = async(e) => { \n    if(!this.state.nftTitle || !this.state.nftDescription ||  !this.state.nftAsset){\n      alert(\n        'Please provide a title, a description and an image to proceed.'\n      );\n    } else {\n      e.preventDefault();\n      let data = new FormData(e.target)\n      let nftAsset = data.get('nftAsset')\n      let nftTitle = data.get('nftTitle')\n      let nftDescription = data.get('nftDescription')\n      // alert(\n      //   `Selected file - ${this.fileInput.current.files[0].name}`\n      // );      \n      const metadataURI = await storeMetadata(nftTitle, nftDescription, nftAsset);\n      this.mint(metadataURI);\n    }\n  };\n\n  // mint token function (calls contract)\n  mint = async(url) => {\n    this.setState({minting: true});\n    //call the safeMint function on the contract\n    const tx = await this.state.contract.safeMint(this.state.minterAddress, url);\n    console.log('Minting to blockchain...');\n\n    // Wait for the transaction to be confirmed, then get the token ID out of the emitted Transfer event.\n    const receipt = await tx.wait();\n    // console.log(receipt);\n    let tokenId = null;\n    for (const event of receipt.events) {\n      if (event.event !== 'Transfer') {\n          continue\n      }\n      tokenId = event.args.tokenId.toString();\n      break;\n    }\n    console.log(`Minted token #${tokenId}`);\n    this.setState({tokenId: tokenId}); \n\n    const MintedMetadataURI = await this.state.contract.tokenURI(tokenId);\n    console.log('Minted token metadata uri: ', MintedMetadataURI);\n    let MintedMetadata = await this.fetchIPFSJSON(MintedMetadataURI);\n    console.log('Minted token metadata: ', MintedMetadata)\n    let MintedMetadataImage = await this.makeGatewayURL(MintedMetadata.image);\n    this.setState({nftView: MintedMetadataImage});\n    this.setState({minting: false});\n  };\n\n  // rewrite ipfs:// uris to dweb.link gateway URLs\n  makeGatewayURL = (ipfsURI) => {\n    return ipfsURI.replace(/^ipfs:\\/\\//, \"https://dweb.link/ipfs/\");\n  };\n  fetchIPFSJSON = async(ipfsURI) => {\n    const url = this.makeGatewayURL(ipfsURI);\n    const resp = await fetch(url);\n    return resp.json();\n  };\n\n  // makeDonation to contract function (calls contract)\n  makeDonation = async() => {\n    let overrides = {\n      from: this.state.minterAddress,\n      value: (ethers.utils.parseUnits(this.state.donateAmount, \"gwei\"))\n    };\n    this.setState({donating: true}); \n    \n    const donation = await this.state.contract.Donate(this.state.minterAddress, overrides);\n    await donation.wait();\n    this.setState({donating: false}); \n    alert(\n      'Thank you!'\n    );\n  };\n\nrender() {  \n  if (window.ethereum) {    \n    window.ethereum.on('chainChanged', () => window.location.reload());\n  };\n  const minterAddress = this.state.minterAddress;\n  const minting = this.state.minting;\n  const donating = this.state.donating;\n  const donateAmount = this.state.donateAmount;\n  const nftView = this.state.nftView;\n  const nftTitle = this.state.nftTitle;\n  const nftDescription = this.state.nftDescription;\n  \n  if (!minterAddress) {\n    return(\n      <div className=\"App\">\n        <ConnectMM \n          onLoginClick={this.loginMM} \n          onLogoutClick={this.logoutMM} \n          minterAddress={minterAddress}\n        />\n        <Text color=\"papayawhip\" t2>  \n          <p>Welcome!</p> \n           Please connect to a \n          <Text color=\"yellow\"> rinkeby </Text> \n          wallet with MetaMask to use this NFT Minter \n        </Text>\n      </div>\n    );\n\n  } else if (!this.state.tokenId) {\n    return (\n      <div className=\"App\">\n        <ConnectMM \n          onLoginClick={this.loginMM} \n          onLogoutClick={this.logoutMM} \n          minterAddress={minterAddress}\n        />\n        <Text color=\"papayawhip\" t1>  \n          Simple NFT minter\n        </Text>\n        <p><Text color=\"papayawhip\" t2> \n          Mint your NFTs by uploading images!\n        </Text></p>\n        <NftForm \n          onFormSubmit = {this.handleSubmit}\n          onInputChange = {this.handleInputChange}\n          minting = {minting} \n          nftTitle = {nftTitle}\n          nftDescription ={nftDescription} \n        />\n        <OpenSeaLink/>\n        <MakeDonation \n          onDonateClick={this.makeDonation} \n          onInputChange={this.handleInputChange} \n          donateAmount={donateAmount} \n          donating={donating}\n        />\n      </div>\n      );\n\n    } return (\n      <div className=\"App\">\n        <ConnectMM \n          onLoginClick={this.loginMM} \n          onLogoutClick={this.logoutMM} \n          minterAddress={minterAddress}\n        />\n        <NftViewer \n          nftView={nftView} \n          nftTitle={nftTitle} \n          nftDescription={nftDescription}\n        />\n        <StyledBlock>\n          <StyledBtn onClick={this.formReset}>\n            <Text uppercase color=\"282c34\" t3>\n              Mint another NFT\n            </Text>\n          </StyledBtn>\n        </StyledBlock>\n        <OpenSeaLink/>\n        <MakeDonation \n          onDonateClick={this.makeDonation} \n          onInputChange={this.handleInputChange} \n          donateAmount={donateAmount} \n          donating={donating}\n        />    \n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}